# -*- coding: utf-8 -*-
"""EDA of Merged dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MUq7HUTddWhNd6KmKl6GkMFpBMxjzcx7
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install pandas matplotlib seaborn

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from google.colab import files

# Define Drive paths
farm_file_path = '/content/drive/My Drive/Colab_Datasets/Farm density dataset.csv'
avian_file_path = '/content/drive/My Drive/Colab_Datasets/avian website data.csv'
output_dir = '/content/drive/My Drive/Colab_Datasets/eda_outputs'

# Create output directory in Drive
os.makedirs(output_dir, exist_ok=True)

# Load datasets
farm_df = pd.read_csv(farm_file_path)
avian_df = pd.read_csv(avian_file_path)

# Clean region names in both datasets
farm_df['Region'] = farm_df['Region'].str.strip()
avian_df['Region'] = avian_df['Region'].str.strip()

# Aggregate avian data by region
# Total cases per region
total_cases = avian_df.groupby('Region').size().reset_index(name='TotalCases')

# Top diagnoses per region (focus on top 4 for clarity)
top_diagnoses = ['Yolk sac infection/omphalitis', 'Coccidiosis', "Marek's Disease", 'Colisepticaemia']
diagnosis_counts = avian_df[avian_df['Diagnosis'].isin(top_diagnoses)].pivot_table(
    index='Region', columns='Diagnosis', aggfunc='size', fill_value=0
).reset_index()

# Clinical signs per region (focus on top 3)
top_clinical_signs = ['Found Dead', 'Wasting', 'Respiratory']
clinical_sign_counts = avian_df[avian_df['Clinical Sign'].isin(top_clinical_signs)].pivot_table(
    index='Region', columns='Clinical Sign', aggfunc='size', fill_value=0
).reset_index()

# Merge datasets
merged_df = farm_df.merge(total_cases, on='Region', how='left').fillna({'TotalCases': 0})
merged_df = merged_df.merge(diagnosis_counts, on='Region', how='left').fillna(0)
merged_df = merged_df.merge(clinical_sign_counts, on='Region', how='left').fillna(0)

# Save merged dataset
merged_df.to_csv(os.path.join(output_dir, "merged_dataset.csv"), index=False)

# Generate summary tables
# Table 1: Total cases and farm size proportions by region
summary_table = merged_df[['Region', '<5 ha', '5<20 ha', '20<50 ha', '50<100 ha', '≥100 ha', 'TotalCases']]
summary_table.to_csv(os.path.join(output_dir, "summary_table.csv"), index=False)

# Table 2: Top diagnoses by region
diagnosis_table = merged_df[['Region'] + top_diagnoses]
diagnosis_table.to_csv(os.path.join(output_dir, "diagnosis_table.csv"), index=False)

# Table 3: Top clinical signs by region
clinical_sign_table = merged_df[['Region'] + top_clinical_signs]
clinical_sign_table.to_csv(os.path.join(output_dir, "clinical_sign_table.csv"), index=False)

# Set plot style
sns.set_style("whitegrid")

# Visualization 1: Bar chart of total disease cases by region
plt.figure(figsize=(10, 6))
sns.barplot(x='Region', y='TotalCases', data=merged_df)
plt.title('Total Disease Cases by Region')
plt.xticks(rotation=45, ha='right')
plt.xlabel('Region')
plt.ylabel('Number of Cases')
plt.tight_layout()
plt.savefig(os.path.join(output_dir, "total_cases_bar.png"))
plt.close()

# Visualization 2: Stacked bar chart of top diagnoses by region
diagnosis_plot_data = merged_df[['Region'] + top_diagnoses]
diagnosis_plot_data.set_index('Region').plot(kind='bar', stacked=True, figsize=(10, 6))
plt.title('Top Diagnoses by Region')
plt.xticks(rotation=45, ha='right')
plt.xlabel('Region')
plt.ylabel('Number of Cases')
plt.legend(title='Diagnosis')
plt.tight_layout()
plt.savefig(os.path.join(output_dir, "diagnoses_stacked_bar.png"))
plt.close()

# Visualization 3: Heatmap of correlations
correlation_vars = ['<5 ha', '5<20 ha', '20<50 ha', '50<100 ha', '≥100 ha', 'TotalCases']
corr_matrix = merged_df[correlation_vars].corr()
plt.figure(figsize=(8, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)
plt.title('Correlation Heatmap')
plt.tight_layout()
plt.savefig(os.path.join(output_dir, "correlation_heatmap.png"))
plt.close()

# Visualization 4: Box plot of disease cases by dominant farm size
merged_df['DominantFarmSize'] = merged_df.apply(
    lambda x: '<5 ha' if x['<5 ha'] > x['≥100 ha'] else '≥100 ha', axis=1
)
plt.figure(figsize=(8, 6))
sns.boxplot(x='DominantFarmSize', y='TotalCases', data=merged_df)
plt.title('Disease Cases by Dominant Farm Size')
plt.xlabel('Dominant Farm Size')
plt.ylabel('Number of Cases')
plt.tight_layout()
plt.savefig(os.path.join(output_dir, "cases_by_farm_size_box.png"))
plt.close()

# Display completion message
print("EDA completed. Tables and charts saved in", output_dir)

# Download all output files
for file_name in os.listdir(output_dir):
    file_path = os.path.join(output_dir, file_name)
    files.download(file_path)